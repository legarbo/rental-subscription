create table "public"."renters" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "first_name" text,
    "last_name" text,
    "email" text,
    "phone" text,
    "flagged" boolean not null default false,
    "active" text default 'TRUE'::text,
    "updated_at" timestamp with time zone default now(),
    "customer_id" uuid default gen_random_uuid()
);


alter table "public"."renters" enable row level security;

CREATE UNIQUE INDEX renters_pkey ON public.renters USING btree (id);

alter table "public"."renters" add constraint "renters_pkey" PRIMARY KEY using index "renters_pkey";

alter table "public"."renters" add constraint "public_renters_customer_id_fkey" FOREIGN KEY (customer_id) REFERENCES customers(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."renters" validate constraint "public_renters_customer_id_fkey";

grant delete on table "public"."renters" to "anon";

grant insert on table "public"."renters" to "anon";

grant references on table "public"."renters" to "anon";

grant select on table "public"."renters" to "anon";

grant trigger on table "public"."renters" to "anon";

grant truncate on table "public"."renters" to "anon";

grant update on table "public"."renters" to "anon";

grant delete on table "public"."renters" to "authenticated";

grant insert on table "public"."renters" to "authenticated";

grant references on table "public"."renters" to "authenticated";

grant select on table "public"."renters" to "authenticated";

grant trigger on table "public"."renters" to "authenticated";

grant truncate on table "public"."renters" to "authenticated";

grant update on table "public"."renters" to "authenticated";

grant delete on table "public"."renters" to "service_role";

grant insert on table "public"."renters" to "service_role";

grant references on table "public"."renters" to "service_role";

grant select on table "public"."renters" to "service_role";

grant trigger on table "public"."renters" to "service_role";

grant truncate on table "public"."renters" to "service_role";

grant update on table "public"."renters" to "service_role";

create policy "Public renters are viewable only by authenticated users"
on "public"."renters"
as permissive
for select
to authenticated
using (true);


create policy "Users can create a renter."
on "public"."renters"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = customer_id));


create policy "Users can delete a renter if they owned it."
on "public"."renters"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = customer_id));


create policy "Users can update their own renter."
on "public"."renters"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = customer_id))
with check ((( SELECT auth.uid() AS uid) = customer_id));